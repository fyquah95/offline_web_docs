var search_data = {"index":{"searchIndex":["minitest","unit","test","unit","assertions","autorunner","runner","runner","worker","assert()","assert_block()","assert_equal()","assert_no_match()","assert_not_equal()","assert_not_nil()","assert_not_same()","assert_not_send()","assert_nothing_raised()","assert_nothing_thrown()","assert_raise()","assert_raise_with_message()","assert_respond_to()","assert_send()","assert_throw()"],"longSearchIndex":["minitest","minitest::unit","test","test::unit","test::unit::assertions","test::unit::autorunner","test::unit::autorunner::runner","test::unit::runner","test::unit::runner::worker","test::unit::assertions#assert()","test::unit::assertions#assert_block()","test::unit::assertions#assert_equal()","test::unit::assertions#assert_no_match()","test::unit::assertions#assert_not_equal()","test::unit::assertions#assert_not_nil()","test::unit::assertions#assert_not_same()","test::unit::assertions#assert_not_send()","test::unit::assertions#assert_nothing_raised()","test::unit::assertions#assert_nothing_thrown()","test::unit::assertions#assert_raise()","test::unit::assertions#assert_raise_with_message()","test::unit::assertions#assert_respond_to()","test::unit::assertions#assert_send()","test::unit::assertions#assert_throw()"],"info":[["MiniTest","","MiniTest.html","",""],["MiniTest::Unit","","MiniTest/Unit.html","",""],["Test","","Test.html","","<p>See Test::Unit\n"],["Test::Unit","","Test/Unit.html","","<p>Test::Unit is an implementation of the xUnit testing framework for Ruby.\n<p>If you are writing new test code, …\n"],["Test::Unit::Assertions","","Test/Unit/Assertions.html","",""],["Test::Unit::AutoRunner","","Test/Unit/AutoRunner.html","",""],["Test::Unit::AutoRunner::Runner","","Test/Unit/AutoRunner/Runner.html","",""],["Test::Unit::Runner","","Test/Unit/Runner.html","",""],["Test::Unit::Runner::Worker","","Test/Unit/Runner/Worker.html","",""],["assert","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert","(test, *msgs)","<p>Tests if <code>test</code> is true.\n<p><code>msg</code> may be a String or a Proc. If <code>msg</code> is a\nString, it will be used as the failure ...\n"],["assert_block","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_block","(*msgs)","<p>Tests the result of the given block. If the block does not return true, the\nassertion will fail. The …\n"],["assert_equal","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_equal","(exp, act, msg = nil)","<p>Tests if <code>expected</code> is equal to <code>actual</code>.\n<p>An optional failure message may be provided as the final argument. …\n"],["assert_no_match","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_no_match","(regexp, string, msg=nil)","<p>Tests if the given Regexp does not match a given String.\n<p>An optional failure message may be provided as …\n"],["assert_not_equal","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_equal","(exp, act, msg=nil)","<p>Tests if <code>expected</code> is not equal to <code>actual</code>.\n<p>An optional failure message may be provided as the final argument. …\n"],["assert_not_nil","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_nil","(exp, msg=nil)","<p>Tests if <code>expression</code> is not nil.\n<p>An optional failure message may be provided as the final argument.\n"],["assert_not_same","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_same","(expected, actual, message=\"\")","<p>Tests if <code>expected</code> is not the same object as\n<code>actual</code>. This test uses Object#equal? to test equality.\n<p>An …\n"],["assert_not_send","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_send","(send_ary, m = nil)","<p>Passes if the method send doesn’t return a true value.\n<p><code>send_array</code> is composed of:\n<p>A receiver\n"],["assert_nothing_raised","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_nothing_raised","(*args)","<p>If any exceptions are given as arguments, the assertion will fail if one of\nthose exceptions are raised. …\n"],["assert_nothing_thrown","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_nothing_thrown","(msg=nil)","<p>Fails if the given block uses a call to Kernel#throw, and returns the\nresult of the block otherwise. …\n"],["assert_raise","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_raise","(*args, &b)","<p>Tests if the given block raises an exception. Acceptable exception types\nmay be given as optional arguments. …\n"],["assert_raise_with_message","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_raise_with_message","(exception, expected, msg = nil, &block)","<p>Tests if the given block raises an exception with the expected message.\n\n<pre>assert_raise_with_message(RuntimeError, ...</pre>\n"],["assert_respond_to","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_respond_to","(obj, (meth, priv), msg = nil)","<p>Tests if the given Object responds to <code>method</code>.\n<p>An optional failure message may be provided as the final …\n"],["assert_send","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_send","(send_ary, m = nil)","<p>Passes if the method send returns a true value.\n<p><code>send_array</code> is composed of:\n<p>A receiver\n"],["assert_throw","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_throw","(tag, msg = nil)","<p>Fails unless the given block throws <code>tag</code>, returns the caught\nvalue otherwise.\n<p>An optional failure message …\n"]]}}